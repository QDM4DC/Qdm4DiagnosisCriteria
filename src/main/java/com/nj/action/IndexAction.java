package com.nj.action;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.LinkedHashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.ctakes.clinicalpipeline.main.CallUIMAPipeline;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import edu.mayo.bmi.medtagger.ml.crfsuite.CRFTrainMain;

/**
 * 		//the following line aims at reading the uploading file into the web. 
		//upload:::::
		//1. a. But in fact, our cTAKES will process it behind, shown below, callUIMAPipeline
		//   b. if the user enter a line of criteria directly, that line will be written into a file and then cTAKES will process that 
		//line as well.
* 		//parse::::: 
		//2. After cTAKES process that line, that line will be put into CRF model to make predictions on the attributes
		//3. Next, the output will be processed and converted into xml file, plus, the xmi file generated by cTAKES will be read again
		//since we need to extract umls cui or similar code. This is done by the parse function
 * @author m048100
 *
 */
@Controller
public class IndexAction {
	private final static Logger logger = LogManager.getLogger(IndexAction.class);

	//private PrintWriter pwInput;
	//private String filePath = "d:/najie";
	private String filePath = "/Users/m048100/Documents/workspace-web/xmlView";
	
	/**
	 * @param request
	 * @param response
	 * @param model
	 * @throws IOException
	 */
	@RequestMapping(value = "uploadFile.do", method = RequestMethod.POST)
	@ResponseBody
	public String upload(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		//inputData/111.txt as the demon input
		//pwInput = new PrintWriter(new FileWriter(new File(filePath,"data/test.txt")));
		//if data/test/testoutput/111.txt.xml already exists, no need to run the following. 
		//Instead, just print the line on the webpage if select uploading and output the file name.
		//another output should include, /Users/m048100/Documents/workspace/xmlView/test/output_ind/111.xml.crfsuite.unigam.bigram.context.document.concept.conToken.uniNorm.posTagging.orthography.affix.umls.unit.numToken.crffv
		//1. 
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile mFile = multipartRequest.getFile("file");
		String filename = mFile.getOriginalFilename();
		InputStream inputStream = mFile.getInputStream();
		filename = filePath + "/inputData/" + filename;
		File file = new File(filename);
		FileOutputStream outputStream = new FileOutputStream(filename);
		IOUtils.copy(inputStream, outputStream);
		inputStream.close();
		outputStream.close();
		StringBuilder build = new StringBuilder("");
		BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file),"utf-8")) ;
		String line = null;
		while((line = reader.readLine())!=null){
			//pwInput.println(line);
			build.append(line+" \r\n");
		}
		
		reader.close();
		//pwInput.flush();
		//pwInput.close();
		//return output;
		return build.toString();
	}
	@RequestMapping(value = "parse.do", method = {RequestMethod.GET,RequestMethod.POST})
	@ResponseBody
	public String parse(String textContent) throws IOException {
		logger.info(textContent);//I hope that textContent is the output file name from cTAKES processing.
		//2
		//String xmifilename = filePath+"/data/test/testoutput/111.txt.xml";
		//String featureFileName = filePath+"/test/output_ind/111.xml.crfsuite.unigam.bigram.context.document.concept.conToken.uniNorm.posTagging.orthography.affix.umls.unit.numToken.crffv";
		//File xmiFile = new File(xmifilename);
		//File featureFile = new File(featureFileName);
		CallUIMAPipeline callUIMAPipeline = new CallUIMAPipeline();
		callUIMAPipeline.init();
		//I only output the filename for convenience now.
		String output = callUIMAPipeline.process();
		logger.info("output from cTAKES pipeline="+output);
		//3
		String fileName = "111.xml.crfsuite.unigam.bigram.context.document.concept.conToken.uniNorm.posTagging.orthography.affix.umls.unit.numToken.crffv";
		String command="-csh "+filePath+"/src/main/resources/machinelearning/crfsuite "
				+ "-model "+filePath+"/test/models/crfsuite.unigam.bigram.context.document.concept.conToken.uniNorm.posTagging.orthography.affix.umls.unit.numToken.models "
				+ "-testonefile "+filePath+"/test/webinput/ "
				+ "-predOutput "+filePath+"/test/weboutput/prediction_output/ "
				+ "-evaOutput "+filePath+"/test/weboutput/prediction_eva/";
//				+ "-testonefile"+filePath+"/test/webinput/"+textContent+" "
//				+ "-predOutput"+filePath+"/test/weboutput/prediction_output/ "
//				+ "-evaOutput"+filePath+"/test/weboutput/prediction_eva/";
		String[] commandArgs = command.split("\\s+");
		
		try {
			CRFTrainMain.main(commandArgs);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//4
		String[] crf2txtArr = {filePath+"/test/prediction_output/111.xml.crfsuite.unigam.bigram.context.document.concept.conToken.uniNorm.posTagging.orthography.affix.umls.unit.numToken.crffv", 
				filePath+"/inputData/111.txt"};
		LinkedHashMap<String,String> entityHm = CRFFormat2HongNaAnnot.convertCRF2HongnaAnnot(crf2txtArr[0], crf2txtArr[1]);
		//I need to add casReader to Converter so that we can read cas file to extract TUI and CUI.
		//5
		String typeSystem = filePath+"/desc/typesystem/typeSystemDescriptor.xml";
		String xmiFileName = filePath+"/data/test/testoutput/111.txt.xml";
		String[] xmiArgs = {typeSystem,xmiFileName};
		HashMap<String,String> umlskeyValueHm = XmiReader.extractXmiValues(xmiArgs);
		String[] args = {filePath+"/test/weboutput/xml_output", filePath+"/test/weboutput/qdmXmlOut"};
		//the last step:
		String qdmdir = filePath+"/test/weboutput/qdmXmlOut/";
		String qdmfilename = "111.qdm.xml";
		//Converter.hm2xml(entityHm, featureDir, qdmXmlOut);
		Converter.entityHm2qdmXml(entityHm, umlskeyValueHm, qdmdir, qdmfilename);
		//String fileName = "new11.xml";
		//String fileName = "qdmXmlOut/1.xml";
		//6 call Converter.entityHm2qdmXml to generate QDMXml file
		StringBuilder build = new StringBuilder();
		//String fileName = "test/weboutput/prediction_output/"+textContent;
		//7 read QDMXml file to populate it on the webpage
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(new File(qdmdir,qdmfilename)))) ;
		String line = null;
		while((line = reader.readLine())!=null){
			build.append(line+" \r\n");
		}
		reader.close();
//		
//		File fileDir = new File(filePath, fileName);
//		File[] listFiles = fileDir.listFiles();
//		StringBuilder build = new StringBuilder("");
//		for(int i=0;i<listFiles.length;i++){
//			//new File(filePath+"/"+fileName)),"utf-8")
//			File eligiFile = listFiles[i];
//			//String fileName = textContent;
//
//			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(eligiFile))) ;
//			String line = null;
//			while((line = reader.readLine())!=null){
//				build.append(line+" \r\n");
//			}
//			reader.close();
//		}
		return build.toString();
	}
}
